"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[3290],{6629:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"components/drawer-layout","title":"Drawer Layout","description":"This component is deprecated.","source":"@site/docs/components/drawer-layout.mdx","sourceDirName":"components","slug":"/components/drawer-layout","permalink":"/react-native-gesture-handler/docs/components/drawer-layout","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/components/drawer-layout.mdx","tags":[],"version":"current","frontMatter":{"id":"drawer-layout","title":"Drawer Layout","sidebar_label":"DrawerLayout"},"sidebar":"tutorialSidebar","previous":{"title":"Buttons","permalink":"/react-native-gesture-handler/docs/components/buttons"},"next":{"title":"Pressable","permalink":"/react-native-gesture-handler/docs/components/pressable"}}');var t=r(4848),i=r(8453),a=r(9030),d=r(9380);const s={id:"drawer-layout",title:"Drawer Layout",sidebar_label:"DrawerLayout"},l=void 0,c={},h=[{value:"Usage:",id:"usage",level:2},{value:"Properties:",id:"properties",level:2},{value:"<code>drawerType</code>",id:"drawertype",level:3},{value:"<code>edgeWidth</code>",id:"edgewidth",level:3},{value:"<code>hideStatusBar</code>",id:"hidestatusbar",level:3},{value:"<code>statusBarAnimation</code>",id:"statusbaranimation",level:3},{value:"<code>overlayColor</code>",id:"overlaycolor",level:3},{value:"<code>renderNavigationView</code>",id:"rendernavigationview",level:3},{value:"<code>onDrawerClose</code>",id:"ondrawerclose",level:3},{value:"<code>onDrawerOpen</code>",id:"ondraweropen",level:3},{value:"<code>onDrawerSlide</code>",id:"ondrawerslide",level:3},{value:"<code>onDrawerStateChanged</code>",id:"ondrawerstatechanged",level:3},{value:"<code>enableTrackpadTwoFingerGesture</code> (iOS only)",id:"enabletrackpadtwofingergesture-ios-only",level:3},{value:"<code>children</code>",id:"children",level:3},{value:"<code>mouseButton(value: MouseButton)</code> (Web &amp; Android only)",id:"mousebuttonvalue-mousebutton-web--android-only",level:3},{value:"<code>enableContextMenu(value: boolean)</code> (Web only)",id:"enablecontextmenuvalue-boolean-web-only",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>openDrawer(options)</code>",id:"opendraweroptions",level:3},{value:"<code>closeDrawer(options)</code>",id:"closedraweroptions",level:3},{value:"Example:",id:"example",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["This component is deprecated.\nPlease use ",(0,t.jsx)(n.a,{href:"/react-native-gesture-handler/docs/components/reanimated-drawer-layout",children:"the reanimated version"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["This is a cross-platform replacement for React Native's ",(0,t.jsx)(n.a,{href:"http://reactnative.dev/docs/drawerlayoutandroid.html",children:"DrawerLayoutAndroid"})," component. It provides a compatible API but allows for the component to be used on both Android and iOS. Please refer to ",(0,t.jsx)(n.a,{href:"http://reactnative.dev/docs/drawerlayoutandroid.html",children:"React Native docs"})," for the detailed usage for standard parameters."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DrawerLayout"})," component isn't exported by default from the ",(0,t.jsx)(n.code,{children:"react-native-gesture-handler"})," package. To use it, import it in the following way:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties:"}),"\n",(0,t.jsx)(n.p,{children:"On top of the standard list of parameters DrawerLayout has an additional set of attributes to customize its behavior. Please refer to the list below:"}),"\n",(0,t.jsx)(n.h3,{id:"drawertype",children:(0,t.jsx)(n.code,{children:"drawerType"})}),"\n",(0,t.jsxs)(n.p,{children:["possible values are: ",(0,t.jsx)(n.code,{children:"front"}),", ",(0,t.jsx)(n.code,{children:"back"})," or ",(0,t.jsx)(n.code,{children:"slide"})," (default is ",(0,t.jsx)(n.code,{children:"front"}),"). It specifies the way the drawer will be displayed. When set to ",(0,t.jsx)(n.code,{children:"front"})," the drawer will slide in and out along with the gesture and will display on top of the content view. When ",(0,t.jsx)(n.code,{children:"back"})," is used the drawer displays behind the content view and can be revealed with gesture of pulling the content view to the side. Finally ",(0,t.jsx)(n.code,{children:"slide"})," option makes the drawer appear like it is attached to the side of the content view; when you pull both content view and drawer will follow the gesture."]}),"\n",(0,t.jsxs)(n.p,{children:["Type ",(0,t.jsx)(n.code,{children:"slide"}),":"]}),"\n",(0,t.jsx)(d.A,{children:(0,t.jsx)("img",{src:(0,a.Ay)("gifs/drawer-slide.gif"),width:"280"})}),"\n",(0,t.jsxs)(n.p,{children:["Type ",(0,t.jsx)(n.code,{children:"front"}),":"]}),"\n",(0,t.jsx)(d.A,{children:(0,t.jsx)("img",{src:(0,a.Ay)("gifs/drawer-front.gif"),width:"280"})}),"\n",(0,t.jsxs)(n.p,{children:["Type ",(0,t.jsx)(n.code,{children:"back"}),":"]}),"\n",(0,t.jsx)(d.A,{children:(0,t.jsx)("img",{src:(0,a.Ay)("gifs/drawer-back.gif"),width:"280"})}),"\n",(0,t.jsx)(n.h3,{id:"edgewidth",children:(0,t.jsx)(n.code,{children:"edgeWidth"})}),"\n",(0,t.jsx)(n.p,{children:"number, allows for defining how far from the edge of the content view the gesture should activate."}),"\n",(0,t.jsx)(n.h3,{id:"hidestatusbar",children:(0,t.jsx)(n.code,{children:"hideStatusBar"})}),"\n",(0,t.jsxs)(n.p,{children:["boolean, when set to ",(0,t.jsx)(n.code,{children:"true"})," Drawer component will use ",(0,t.jsx)(n.a,{href:"http://reactnative.dev/docs/statusbar.html",children:"StatusBar"}),' API to hide the OS status bar whenever the drawer is pulled or when its in an "open" state.']}),"\n",(0,t.jsx)(n.h3,{id:"statusbaranimation",children:(0,t.jsx)(n.code,{children:"statusBarAnimation"})}),"\n",(0,t.jsxs)(n.p,{children:["possible values are: ",(0,t.jsx)(n.code,{children:"slide"}),", ",(0,t.jsx)(n.code,{children:"none"})," or ",(0,t.jsx)(n.code,{children:"fade"})," (defaults to ",(0,t.jsx)(n.code,{children:"slide"}),"). Can be used when ",(0,t.jsx)(n.code,{children:"hideStatusBar"})," is set to ",(0,t.jsx)(n.code,{children:"true"})," and will select the animation used for hiding/showing the status bar. See ",(0,t.jsx)(n.a,{href:"http://reactnative.dev/docs/statusbar.html#statusbaranimation",children:"StatusBar"})," documentation for more details."]}),"\n",(0,t.jsx)(n.h3,{id:"overlaycolor",children:(0,t.jsx)(n.code,{children:"overlayColor"})}),"\n",(0,t.jsxs)(n.p,{children:["color (default to ",(0,t.jsx)(n.code,{children:'"black"'}),") of a semi-transparent overlay to be displayed on top of the content view when drawer gets open. A solid color should be used as the opacity is added by the Drawer itself and the opacity of the overlay is animated (from 0% to 70%)."]}),"\n",(0,t.jsx)(n.h3,{id:"rendernavigationview",children:(0,t.jsx)(n.code,{children:"renderNavigationView"})}),"\n",(0,t.jsxs)(n.p,{children:["function. This attribute is present in the standard implementation already and is one of the required params. Gesture handler version of DrawerLayout make it possible for the function passed as ",(0,t.jsx)(n.code,{children:"renderNavigationView"})," to take an Animated value as a parameter that indicates the progress of drawer opening/closing animation (progress value is 0 when closed and 1 when opened). This can be used by the drawer component to animated its children while the drawer is opening or closing."]}),"\n",(0,t.jsx)(n.h3,{id:"ondrawerclose",children:(0,t.jsx)(n.code,{children:"onDrawerClose"})}),"\n",(0,t.jsx)(n.p,{children:"function. This function is called when the drawer is closed."}),"\n",(0,t.jsx)(n.h3,{id:"ondraweropen",children:(0,t.jsx)(n.code,{children:"onDrawerOpen"})}),"\n",(0,t.jsx)(n.p,{children:"function. This function is called when the drawer is opened."}),"\n",(0,t.jsx)(n.h3,{id:"ondrawerslide",children:(0,t.jsx)(n.code,{children:"onDrawerSlide"})}),"\n",(0,t.jsx)(n.p,{children:"function. This function is called as a drawer sliding open from touch events. The progress of the drawer opening/closing is passed back as 0 when closed and 1 when opened."}),"\n",(0,t.jsx)(n.h3,{id:"ondrawerstatechanged",children:(0,t.jsx)(n.code,{children:"onDrawerStateChanged"})}),"\n",(0,t.jsx)(n.p,{children:"function. This function is called when the status of the drawer changes. It takes two arguments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"newState: DrawerState"})," - state of the ",(0,t.jsx)(n.code,{children:"Drawer"}),". It can be one of the following:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Idle"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Dragging"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Settling"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"drawerWillShow: boolean"})," - if ",(0,t.jsx)(n.code,{children:"true"}),", ",(0,t.jsx)(n.code,{children:"Drawer"})," is about to open."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"enabletrackpadtwofingergesture-ios-only",children:[(0,t.jsx)(n.code,{children:"enableTrackpadTwoFingerGesture"})," (iOS only)"]}),"\n",(0,t.jsx)(n.p,{children:"Enables two-finger gestures on supported devices, for example iPads with trackpads. If not enabled the gesture will require click + drag, with enableTrackpadTwoFingerGesture swiping with two fingers will also trigger the gesture."}),"\n",(0,t.jsx)(n.h3,{id:"children",children:(0,t.jsx)(n.code,{children:"children"})}),"\n",(0,t.jsxs)(n.p,{children:["component or function. Children is a component which is rendered by default and is wrapped by drawer. However, it could be also a render function which takes an Animated value as a parameter that indicates the progress of drawer opening/closing animation (progress value is 0 when closed and 1 when opened) is the same way like ",(0,t.jsx)(n.code,{children:"renderNavigationView"})," prop."]}),"\n",(0,t.jsxs)(n.h3,{id:"mousebuttonvalue-mousebutton-web--android-only",children:[(0,t.jsx)(n.code,{children:"mouseButton(value: MouseButton)"})," (Web & Android only)"]}),"\n",(0,t.jsxs)(n.p,{children:["Allows users to choose which mouse button should handler respond to. The enum ",(0,t.jsx)(n.code,{children:"MouseButton"})," consists of the following predefined fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"LEFT"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RIGHT"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"MIDDLE"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"BUTTON_4"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"BUTTON_5"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ALL"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Arguments can be combined using ",(0,t.jsx)(n.code,{children:"|"})," operator, e.g. ",(0,t.jsx)(n.code,{children:"mouseButton(MouseButton.LEFT | MouseButton.RIGHT)"}),". Default value is set to ",(0,t.jsx)(n.code,{children:"MouseButton.LEFT"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"enablecontextmenuvalue-boolean-web-only",children:[(0,t.jsx)(n.code,{children:"enableContextMenu(value: boolean)"})," (Web only)"]}),"\n",(0,t.jsxs)(n.p,{children:["Specifies whether context menu should be enabled after clicking on underlying view with right mouse button. Default value is set to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"opendraweroptions",children:(0,t.jsx)(n.code,{children:"openDrawer(options)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"openDrawer"})," can take an optional ",(0,t.jsx)(n.code,{children:"options"})," parameter which is an object, enabling further customization of the open animation."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"options"})," has two optional properties:"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"velocity"}),": number, the initial velocity of the object attached to the spring. Default 0 (object is at rest).\n",(0,t.jsx)(n.code,{children:"speed"}),": number, controls speed of the animation. Default 12."]}),"\n",(0,t.jsx)(n.h3,{id:"closedraweroptions",children:(0,t.jsx)(n.code,{children:"closeDrawer(options)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"closeDrawer"})," can take an optional ",(0,t.jsx)(n.code,{children:"options"})," parameter which is an object, enabling further customization of the close animation."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"options"})," has two optional properties:"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"velocity"}),": number, the initial velocity of the object attached to the spring. Default 0 (object is at rest).\n",(0,t.jsx)(n.code,{children:"speed"}),": number, controls speed of the animation. Default 12."]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example:"}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/apps/common-app/src/basic/horizontalDrawer/index.tsx",children:"drawer example"})," from GestureHandler Example App or view it directly on your phone by visiting ",(0,t.jsx)(n.a,{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo",children:"our expo demo"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'class Drawerable extends Component {\n  handleDrawerSlide = (status) => {\n    // outputs a value between 0 and 1\n    console.log(status);\n  };\n\n  renderDrawer = () => {\n    return (\n      <View>\n        <Text>I am in the drawer!</Text>\n      </View>\n    );\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <DrawerLayout\n          drawerWidth={200}\n          drawerPosition={DrawerLayout.positions.Right}\n          drawerType="front"\n          drawerBackgroundColor="#ddd"\n          renderNavigationView={this.renderDrawer}\n          onDrawerSlide={this.handleDrawerSlide}>\n          <View>\n            <Text>Hello, it\'s me</Text>\n          </View>\n        </DrawerLayout>\n      </View>\n    );\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var o=r(6540);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}},9380:(e,n,r)=>{r.d(n,{A:()=>a});var o=r(6540),t=r(4848);const i={container:{display:"flex",justifyContent:"space-evenly",flexWrap:"wrap"},img:{border:"1px solid #acacac",borderRadius:"6px",boxShadow:"0 0 20px #acacac",marginTop:"1em",marginBottom:"1em"}},a=({children:e})=>(0,t.jsx)("div",{style:i.container,children:o.Children.map(e,(e=>(0,o.cloneElement)(e,{...e.props.style,style:i.img})))})}}]);