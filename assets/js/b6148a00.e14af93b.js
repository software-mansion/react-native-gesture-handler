"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[5717],{3341:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"components/reanimated-drawer-layout","title":"Reanimated Drawer Layout","description":"Cross-platform replacement for the React Native\'s DrawerLayoutAndroid component.","source":"@site/docs/components/reanimated-drawer-layout.mdx","sourceDirName":"components","slug":"/components/reanimated-drawer-layout","permalink":"/react-native-gesture-handler/docs/components/reanimated-drawer-layout","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/components/reanimated-drawer-layout.mdx","tags":[],"version":"current","frontMatter":{"id":"reanimated-drawer-layout","title":"Reanimated Drawer Layout","sidebar_label":"Reanimated Drawer Layout"},"sidebar":"tutorialSidebar","previous":{"title":"Pressable","permalink":"/react-native-gesture-handler/docs/components/pressable"},"next":{"title":"Reanimated Swipeable","permalink":"/react-native-gesture-handler/docs/components/reanimated_swipeable"}}');var i=r(4848),d=r(8453),o=r(9030);const s={id:"reanimated-drawer-layout",title:"Reanimated Drawer Layout",sidebar_label:"Reanimated Drawer Layout"},a=void 0,l={},c=[{value:"Usage:",id:"usage",level:3},{value:"Properties:",id:"properties",level:2},{value:"<code>drawerType</code>",id:"drawertype",level:3},{value:"<code>edgeWidth</code>",id:"edgewidth",level:3},{value:"<code>hideStatusBar</code>",id:"hidestatusbar",level:3},{value:"<code>statusBarAnimation</code>",id:"statusbaranimation",level:3},{value:"<code>overlayColor</code>",id:"overlaycolor",level:3},{value:"<code>renderNavigationView</code>",id:"rendernavigationview",level:3},{value:"<code>onDrawerClose</code>",id:"ondrawerclose",level:3},{value:"<code>onDrawerOpen</code>",id:"ondraweropen",level:3},{value:"<code>onDrawerSlide</code>",id:"ondrawerslide",level:3},{value:"<code>onDrawerStateChanged</code>",id:"ondrawerstatechanged",level:3},{value:"<code>enableTrackpadTwoFingerGesture</code> (iOS only)",id:"enabletrackpadtwofingergesture-ios-only",level:3},{value:"<code>children</code>",id:"children",level:3},{value:"<code>mouseButton(value: MouseButton)</code> (Web &amp; Android only)",id:"mousebuttonvalue-mousebutton-web--android-only",level:3},{value:"<code>enableContextMenu(value: boolean)</code> (Web only)",id:"enablecontextmenuvalue-boolean-web-only",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>openDrawer(options)</code>",id:"opendraweroptions",level:3},{value:"<code>closeDrawer(options)</code>",id:"closedraweroptions",level:3},{value:"Example:",id:"example",level:2}];function h(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Cross-platform replacement for the React Native's ",(0,i.jsx)(n.a,{href:"http://reactnative.dev/docs/drawerlayoutandroid.html",children:"DrawerLayoutAndroid"})," component.",(0,i.jsx)(n.br,{}),"\n","For detailed usage of standard parameters, please refer to the ",(0,i.jsx)(n.a,{href:"http://reactnative.dev/docs/drawerlayoutandroid.html",children:"React Native docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage:"}),"\n",(0,i.jsx)(n.p,{children:"To use it, import it in the following way:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import ReanimatedDrawerLayout from 'react-native-gesture-handler/ReanimatedDrawerLayout';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties:"}),"\n",(0,i.jsx)(n.h3,{id:"drawertype",children:(0,i.jsx)(n.code,{children:"drawerType"})}),"\n",(0,i.jsxs)(n.p,{children:["specifies the way the drawer will be displayed.\nAccepts values of the ",(0,i.jsx)(n.code,{children:"DrawerPosition"})," enum. Defaults to ",(0,i.jsx)(n.code,{children:"FRONT"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FRONT"})," the drawer will be displayed above the content view."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BACK"})," the drawer will be displayed below the content view, revealed by sliding away the content view."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SLIDE"})," the drawer will appear attached to the content view, opening it slides both the drawer and the content view."]}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"FRONT"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"BACK"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"SLIDE"})})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:(0,o.Ay)("gifs/new-drawer-front.gif")})}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:(0,o.Ay)("gifs/new-drawer-back.gif")})}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:(0,o.Ay)("gifs/new-drawer-slide.gif")})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"edgewidth",children:(0,i.jsx)(n.code,{children:"edgeWidth"})}),"\n",(0,i.jsx)(n.p,{children:"width of the invisible, draggable area on the edge of the content view, which can be dragged to open the drawer."}),"\n",(0,i.jsx)(n.h3,{id:"hidestatusbar",children:(0,i.jsx)(n.code,{children:"hideStatusBar"})}),"\n",(0,i.jsxs)(n.p,{children:["a boolean value. When set to ",(0,i.jsx)(n.code,{children:"true"}),", drawer component will use ",(0,i.jsx)(n.a,{href:"http://reactnative.dev/docs/statusbar.html",children:"StatusBar API"})," to hide the OS status bar when the drawer is dragged or idle in the ",(0,i.jsx)(n.code,{children:"open"})," position."]}),"\n",(0,i.jsx)(n.h3,{id:"statusbaranimation",children:(0,i.jsx)(n.code,{children:"statusBarAnimation"})}),"\n",(0,i.jsxs)(n.p,{children:["a string with possible values: ",(0,i.jsx)(n.code,{children:"slide"}),", ",(0,i.jsx)(n.code,{children:"none"})," or ",(0,i.jsx)(n.code,{children:"fade"}),". Defaults to ",(0,i.jsx)(n.code,{children:"slide"}),".\nMay be used in combination with ",(0,i.jsx)(n.code,{children:"hideStatusBar"})," to select the animation used for hiding the status bar.\nSee ",(0,i.jsx)(n.a,{href:"http://reactnative.dev/docs/statusbar.html#statusbaranimation",children:"StatusBar API"})," docs."]}),"\n",(0,i.jsx)(n.h3,{id:"overlaycolor",children:(0,i.jsx)(n.code,{children:"overlayColor"})}),"\n",(0,i.jsxs)(n.p,{children:["color of the background overlay on top of the content window when the drawer is ",(0,i.jsx)(n.code,{children:"open"}),".",(0,i.jsx)(n.br,{}),"\n","This color's opacity animates from 0% to 100% as the drawer transitions from closed to open. Defaults to ",(0,i.jsx)(n.code,{children:"rgba(0, 0, 0, 0.7)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"rendernavigationview",children:(0,i.jsx)(n.code,{children:"renderNavigationView"})}),"\n",(0,i.jsxs)(n.p,{children:["a renderer function for the drawer component, provided with a ",(0,i.jsx)(n.code,{children:"progress"})," parameter."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"progress"})," - ",(0,i.jsx)(n.code,{children:"SharedValue"})," that indicates the progress of drawer opening/closing animation.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["equals ",(0,i.jsx)(n.code,{children:"0"})," when the ",(0,i.jsx)(n.code,{children:"drawer"})," is closed and ",(0,i.jsx)(n.code,{children:"1"})," when the ",(0,i.jsx)(n.code,{children:"drawer"})," is opened"]}),"\n",(0,i.jsxs)(n.li,{children:["can be used by the ",(0,i.jsx)(n.code,{children:"drawer"})," component to animated its children while the ",(0,i.jsx)(n.code,{children:"drawer"})," is opening or closing"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ondrawerclose",children:(0,i.jsx)(n.code,{children:"onDrawerClose"})}),"\n",(0,i.jsx)(n.p,{children:"a function which is called when the drawer has been closed."}),"\n",(0,i.jsx)(n.h3,{id:"ondraweropen",children:(0,i.jsx)(n.code,{children:"onDrawerOpen"})}),"\n",(0,i.jsx)(n.p,{children:"a function which is called when the drawer has been opened."}),"\n",(0,i.jsx)(n.h3,{id:"ondrawerslide",children:(0,i.jsx)(n.code,{children:"onDrawerSlide"})}),"\n",(0,i.jsxs)(n.p,{children:["a function which is called when drawer is moving or animating, provided with a ",(0,i.jsx)(n.code,{children:"progress"})," parameter."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"progress"})," - ",(0,i.jsx)(n.code,{children:"SharedValue"})," that indicates the progress of drawer opening/closing animation.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["equals ",(0,i.jsx)(n.code,{children:"0"})," when the ",(0,i.jsx)(n.code,{children:"drawer"})," is closed and ",(0,i.jsx)(n.code,{children:"1"})," when the ",(0,i.jsx)(n.code,{children:"drawer"})," is opened"]}),"\n",(0,i.jsxs)(n.li,{children:["can be used by the ",(0,i.jsx)(n.code,{children:"drawer"})," component to animated its children while the ",(0,i.jsx)(n.code,{children:"drawer"})," is opening or closing"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ondrawerstatechanged",children:(0,i.jsx)(n.code,{children:"onDrawerStateChanged"})}),"\n",(0,i.jsx)(n.p,{children:"a function which is called when the status of the drawer changes. It takes two arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"newState"})," - interaction state of the drawer. It can be one of the following:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DrawerState.IDLE"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DrawerState.DRAGGING"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DrawerState.SETTLING"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"drawerWillShow"})," - ",(0,i.jsx)(n.code,{children:"true"})," when ",(0,i.jsx)(n.code,{children:"drawer"})," started animating to ",(0,i.jsx)(n.code,{children:"open"})," position, ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"enabletrackpadtwofingergesture-ios-only",children:[(0,i.jsx)(n.code,{children:"enableTrackpadTwoFingerGesture"})," (iOS only)"]}),"\n",(0,i.jsxs)(n.p,{children:["enables two-finger gestures on supported devices, for example iPads with trackpads.\nIf not enabled, the gesture will require click + drag, with ",(0,i.jsx)(n.code,{children:"enableTrackpadTwoFingerGesture"})," swiping with two fingers will also trigger the gesture."]}),"\n",(0,i.jsx)(n.h3,{id:"children",children:(0,i.jsx)(n.code,{children:"children"})}),"\n",(0,i.jsxs)(n.p,{children:["either a component that's rendered in the content view or a function.\nIf ",(0,i.jsx)(n.code,{children:"children"})," is a function, it is provided with a ",(0,i.jsx)(n.code,{children:"progress"})," parameter."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"progress"})," - ",(0,i.jsx)(n.code,{children:"SharedValue"})," that indicates the progress of drawer opening/closing animation.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["equals ",(0,i.jsx)(n.code,{children:"0"})," when the ",(0,i.jsx)(n.code,{children:"drawer"})," is closed and ",(0,i.jsx)(n.code,{children:"1"})," when the ",(0,i.jsx)(n.code,{children:"drawer"})," is opened"]}),"\n",(0,i.jsxs)(n.li,{children:["can be used by the ",(0,i.jsx)(n.code,{children:"drawer"})," component to animated its children while the ",(0,i.jsx)(n.code,{children:"drawer"})," is opening or closing"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"mousebuttonvalue-mousebutton-web--android-only",children:[(0,i.jsx)(n.code,{children:"mouseButton(value: MouseButton)"})," (Web & Android only)"]}),"\n",(0,i.jsxs)(n.p,{children:["allows users to choose which mouse button should handler respond to.\nThe enum ",(0,i.jsx)(n.code,{children:"MouseButton"})," consists of the following predefined fields:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"LEFT"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"RIGHT"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"MIDDLE"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"BUTTON_4"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"BUTTON_5"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"ALL"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Arguments can be combined using ",(0,i.jsx)(n.code,{children:"|"})," operator, e.g. ",(0,i.jsx)(n.code,{children:"mouseButton(MouseButton.LEFT | MouseButton.RIGHT)"}),". Defaults to ",(0,i.jsx)(n.code,{children:"MouseButton.LEFT"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"enablecontextmenuvalue-boolean-web-only",children:[(0,i.jsx)(n.code,{children:"enableContextMenu(value: boolean)"})," (Web only)"]}),"\n",(0,i.jsxs)(n.p,{children:["specifies whether context menu should be enabled after clicking on underlying view with right mouse button. Defaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"opendraweroptions",children:(0,i.jsx)(n.code,{children:"openDrawer(options)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"openDrawer"})," accepts an optional ",(0,i.jsx)(n.code,{children:"options"})," parameter, which is an object with the following optional properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"initialVelocity"})," - the initial velocity of the object attached to the spring. Defaults to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"animationSpeed"})," - controls speed of the animation. Defaults to ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"closedraweroptions",children:(0,i.jsx)(n.code,{children:"closeDrawer(options)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"closeDrawer"})," accepts an optional ",(0,i.jsx)(n.code,{children:"options"})," parameter, which is an object with the following optional properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"initialVelocity"})," - initial velocity of the object attached to the spring. Defaults to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"animationSpeed"})," - controls speed of the animation. Defaults to ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example:"}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/apps/common-app/src/release_tests/reanimatedDrawerLayout/index.tsx",children:"reanimated drawer layout example"})," from GestureHandler example app."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import React, { useRef } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nimport ReanimatedDrawerLayout, {\n  DrawerType,\n  DrawerPosition,\n  DrawerLayoutMethods,\n} from 'react-native-gesture-handler/ReanimatedDrawerLayout';\n\nconst DrawerPage = () => {\n  return (\n    <View style={styles.drawerContainer}>\n      <Text>Lorem ipsum</Text>\n    </View>\n  );\n};\n\nexport default function ReanimatedDrawerExample() {\n  const drawerRef = useRef < DrawerLayoutMethods > null;\n  const tapGesture = Gesture.Tap()\n    .runOnJS(true)\n    .onStart(() => drawerRef.current?.openDrawer());\n\n  return (\n    <ReanimatedDrawerLayout\n      ref={drawerRef}\n      renderNavigationView={() => <DrawerPage />}\n      drawerPosition={DrawerPosition.LEFT}\n      drawerType={DrawerType.FRONT}>\n      <View style={styles.innerContainer}>\n        <GestureDetector gesture={tapGesture}>\n          <View style={styles.box}>\n            <Text>Open drawer</Text>\n          </View>\n        </GestureDetector>\n      </View>\n    </ReanimatedDrawerLayout>\n  );\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'pink',\n  },\n  innerContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  box: {\n    padding: 20,\n    backgroundColor: 'pink',\n  },\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(6540);const i={},d=t.createContext(i);function o(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);