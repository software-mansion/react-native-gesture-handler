/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ColorPropConverter;
import com.facebook.react.bridge.DynamicFromObject;
import com.facebook.react.uimanager.BaseViewManager;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.LayoutShadowNode;

public class RNGestureHandlerButtonManagerDelegate<T extends View, U extends BaseViewManager<T, ? extends LayoutShadowNode> & RNGestureHandlerButtonManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public RNGestureHandlerButtonManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "exclusive":
        mViewManager.setExclusive(view, value == null ? true : (boolean) value);
        break;
      case "foreground":
        mViewManager.setForeground(view, value == null ? false : (boolean) value);
        break;
      case "borderless":
        mViewManager.setBorderless(view, value == null ? false : (boolean) value);
        break;
      case "enabled":
        mViewManager.setEnabled(view, value == null ? true : (boolean) value);
        break;
      case "rippleColor":
        mViewManager.setRippleColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "rippleRadius":
        mViewManager.setRippleRadius(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "touchSoundDisabled":
        mViewManager.setTouchSoundDisabled(view, value == null ? false : (boolean) value);
        break;
      case "borderRadius":
        mViewManager.setBorderRadius(view, new DynamicFromObject(value));
        break;
      case "borderTopLeftRadius":
        mViewManager.setBorderTopLeftRadius(view, new DynamicFromObject(value));
        break;
      case "borderTopRightRadius":
        mViewManager.setBorderTopRightRadius(view, new DynamicFromObject(value));
        break;
      case "borderBottomLeftRadius":
        mViewManager.setBorderBottomLeftRadius(view, new DynamicFromObject(value));
        break;
      case "borderBottomRightRadius":
        mViewManager.setBorderBottomRightRadius(view, new DynamicFromObject(value));
        break;
      case "borderWidth":
        mViewManager.setBorderWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderLeftWidth":
        mViewManager.setBorderLeftWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderRightWidth":
        mViewManager.setBorderRightWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderTopWidth":
        mViewManager.setBorderTopWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderBottomWidth":
        mViewManager.setBorderBottomWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderStartWidth":
        mViewManager.setBorderStartWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderEndWidth":
        mViewManager.setBorderEndWidth(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "borderColor":
        mViewManager.setBorderColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderLeftColor":
        mViewManager.setBorderLeftColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderRightColor":
        mViewManager.setBorderRightColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderTopColor":
        mViewManager.setBorderTopColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderBottomColor":
        mViewManager.setBorderBottomColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderStartColor":
        mViewManager.setBorderStartColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderEndColor":
        mViewManager.setBorderEndColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "borderStyle":
        mViewManager.setBorderStyle(view, value == null ? "solid" : (String) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }
}
