
/**
 * This code was generated by
 * [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generated by codegen project: GenerateShadowNodeCpp.js
 */

#include "RNGestureHandlerButtonWrapperShadowNode.h"

namespace facebook::react {

extern const char RNGestureHandlerButtonWrapperComponentName[] =
    "RNGestureHandlerButtonWrapper";

void RNGestureHandlerButtonWrapperShadowNode::initialize() {
  // Disable forcing view flattening
  ShadowNode::traits_.unset(ShadowNodeTraits::ForceFlattenView);

  // When the button wrapper is cloned and has a child node, the child node
  // should be cloned as well to ensure it is mutable.
  const auto &children = getChildren();
  if (!children.empty()) {
    react_native_assert(
        children.size() == 1 &&
        "RNGestureHandlerButtonWrapper received more than one child");

    const auto clonedChild = children[0]->clone({});
    replaceChild(*children[0], clonedChild);
  }
}

void RNGestureHandlerButtonWrapperShadowNode::layout(
    LayoutContext layoutContext) {
  YogaLayoutableShadowNode::layout(layoutContext);
  // TODO: consider allowing more than one child and doing bounding box
  react_native_assert(getChildren().size() == 1);

  auto child = std::static_pointer_cast<const YogaLayoutableShadowNode>(
      getChildren()[0]);

  child->ensureUnsealed();
  auto mutableChild = std::const_pointer_cast<YogaLayoutableShadowNode>(child);

  // TODO: figure out the correct way to setup metrics between button wrapper
  // and the child
  auto metrics = child->getLayoutMetrics();
  metrics.frame = child->getLayoutMetrics().frame;
  setLayoutMetrics(metrics);

  auto childmetrics = child->getLayoutMetrics();
  childmetrics.frame.origin = Point{};
  mutableChild->setLayoutMetrics(childmetrics);
}

} // namespace facebook::react
